# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: cypress/base:8

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v4a-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4a-dependencies-
      - restore_cache:
          keys:
            - v4b-dependencies-{{ checksum "demo/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4b-dependencies-
      - restore_cache:
          keys:
            - v4c-dependencies-{{ checksum "packages/jarl-react/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4c-dependencies-
      - restore_cache:
          keys:
            - v4d-dependencies-{{ checksum "packages/jarl-react-native/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4d-dependencies-
      - restore_cache:
          keys:
            - v4e-dependencies-{{ checksum "packages/jarl-react-redux/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4e-dependencies-

      - run: yarn
      - run: yarn bootstrap

      - save_cache:
          paths:
            - node_modules
          key: v4a-dependencies-{{ checksum "package.json" }}
      - save_cache:
          paths:
            - demo/node_modules
          key: v4b-dependencies-{{ checksum "demo/package.json" }}
      - save_cache:
          paths:
            - packages/jarl-react/node_modules
          key: v4c-dependencies-{{ checksum "packages/jarl-react/package.json" }}
      - save_cache:
          paths:
            - packages/jarl-react-native/node_modules
          key: v4d-dependencies-{{ checksum "packages/jarl-react-native/package.json" }}
      - save_cache:
          paths:
            - packages/jarl-react-redux/node_modules
          key: v4e-dependencies-{{ checksum "packages/jarl-react-redux/package.json" }}

      # run tests!
      - run: yarn lint
      - run: yarn build
      - run: yarn ci-test
      # start up static server in background
      - run:
          command: yarn ci-start
          working_directory: demo
          background: true
      # run E2E
      - run:
          command: yarn ci-cypress
          working_directory: demo
      # kill server
      - run:
          command: yarn ci-stop
          working_directory: demo

  publish:
    docker:
      - image: cypress/base:8
      # Could use a different image but caches will match (?) the cypress image
      # - image: circleci/node:8.11.1
    working_directory: ~/repo
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v4a-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4a-dependencies-
      - restore_cache:
          keys:
            - v4b-dependencies-{{ checksum "demo/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4b-dependencies-
      - restore_cache:
          keys:
            - v4c-dependencies-{{ checksum "packages/jarl-react/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4c-dependencies-
      - restore_cache:
          keys:
            - v4d-dependencies-{{ checksum "packages/jarl-react-native/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4d-dependencies-
      - restore_cache:
          keys:
            - v4e-dependencies-{{ checksum "packages/jarl-react-redux/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v4e-dependencies-

      - run: yarn
      - run: yarn bootstrap
      - run: yarn build

      # Create auth file for npm
      - run:
          name: Authorise npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

      # For whatever reason lerna publish wasn't finding the auth file,
      # just run them all manually thru npm.
      # These have to be published before docker can be built; even tho
      # they won't be installed, Yarn tries to resolve them and errors
      # if they don't exist yet. https://github.com/yarnpkg/yarn/issues/4646
      #- run:
      #    name: Publish to npm
      #    command: |
      #      cd packages/jarl-react && npm publish
      #      cd ../jarl-react-native && npm publish
      #      cd ../jarl-react-redux && npm publish

      # Docker
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - restore_cache:
          keys:
            - v4-dockerlayer-{{ checksum "demo/Dockerfile" }}-{{ checksum "demo/dist/asset-manifest.json" }}
            - v4-dockerlayer-{{ checksum "demo/Dockerfile" }}-
            - v4-dockerlayer-
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app demo
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          paths:
            - /caches/app.tar
          key: v4-dockerlayer-{{ checksum "demo/Dockerfile" }}-{{ checksum "demo/dist/asset-manifest.json" }}

      - run:
          name: Docker push
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag app "downplay/jarl-demos:$CIRCLE_SHA1"
            docker push "downplay/jarl-demos:$CIRCLE_SHA1"

      # Now deployment
      - run:
          name: Now deployment
          command: |
            echo "FROM downplay/jarl-demos:$CIRCLE_SHA1" >> now/Dockerfile
            yarn global add now
            cd now
            # Deploy and store URL in env
            # sed regexes are fairly arcane but got this working eventually
            NOW_DEPLOY=$(now -t ${NOW_TOKEN} | sed -n "s/.*\(https:\/\/jarl-downplay-co-.*\.sh\).*/\1/p" )
            echo $NOW_DEPLOY
            # Run E2E against staging
            # TODO: Split to separate task
            cd ../demo
            CYPRESS_baseUrl=${NOW_DEPLOY}
            yarn ci-cypress
            now -t ${NOW_TOKEN} alias ${NOW_DEPLOY} jarl.downplay.co

workflows:
  version: 2
  # Build & test anything not on master
  pr_build:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
  # For now, attempt to deploy anything that lands on master
  master_deploy:
    jobs:
      #- build:
      #    filters:
      #      branches:
      #        only: master
      - publish:
          #requires:
          #  - build
          filters:
            branches:
              only: master
