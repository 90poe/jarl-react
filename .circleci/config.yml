# YAML anchors
defaults: &defaults
  docker:
    # Cypress docker image for running E2E tests
    - image: cypress/base:8
  working_directory: ~/repo

restore: &restore
  restore_cache:
    keys:
      - v5-dependencies-{{ checksum "package.json" }}-{{ checksum "demo/package.json" }}-{{ checksum "packages/jarl-react/package.json" }}-{{ checksum "packages/jarl-react-native/package.json" }}-{{ checksum "packages/jarl-react-redux/package.json" }}
      # fallback to using the latest cache if no exact match is found
      - v5-dependencies-

setup: &setup
  run:
    name: Setup npm dependencies
    command: |
      yarn
      yarn bootstrap

build: &build
  run: 
    name: Build packages and demo site
    command: yarn build

# JARL CircleCI 2.0 configuration file
version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - *restore
      - *setup

      - save_cache:
          paths:
            - node_modules
            - demo/node_modules
            - packages/jarl-react/node_modules
            - packages/jarl-react-native/node_modules
            - packages/jarl-react-redux/node_modules
          key: v5-dependencies-{{ checksum "package.json" }}-{{ checksum "demo/package.json" }}-{{ checksum "packages/jarl-react/package.json" }}-{{ checksum "packages/jarl-react-native/package.json" }}-{{ checksum "packages/jarl-react-redux/package.json" }}

      # lint, build, test
      - run: yarn lint
      - *build
      - run: yarn ci-test

      # start up static server in background
      - run:
          command: yarn ci-start
          working_directory: demo
          background: true
      # run E2E
      - run:
          command: yarn ci-cypress
          working_directory: demo
      # kill server
      - run:
          command: yarn ci-stop
          working_directory: demo

  publish:
    <<: *defaults
    steps:
      - checkout
      - *restore
      - *setup

      - run:
          name: Export build number
          command: export JARL_BUILD_NUMBER=${CIRCLE_BUILD_NUM}

      - *build

      # Create auth file for npm
      - run:
          name: Authorize npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

      # For whatever reason lerna publish wasn't finding the auth file,
      # just run them all manually thru npm.
      # These have to be published before docker can be built; even tho
      # they won't be installed, Yarn tries to resolve them and errors
      # if they don't exist yet. https://github.com/yarnpkg/yarn/issues/4646
      - run:
          name: Publish to npm if tagged
          command: |
            # Is it a tagged build? Matches v1.2.3 and e.g. v1.2.3-alpha.1
            if [[ `git describe 2>/dev/null` == ^v([0-9]+\.){2}[0-9+](-[a-z]+(\.[0-9]+)?)?$ ]] ; then
              # Save version for later
              export JARL_VERSION=$(git describe)
              # Publish packages on npm              
              cd packages/jarl-react && npm publish
              cd ../jarl-react-native && npm publish
              cd ../jarl-react-redux && npm publish
            fi

      # Docker
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - restore_cache:
          keys:
            - v4-dockerlayer-{{ checksum "demo/Dockerfile" }}-{{ checksum "demo/dist/asset-manifest.json" }}
            - v4-dockerlayer-{{ checksum "demo/Dockerfile" }}-
            - v4-dockerlayer-
      - run:
          name: Load Docker layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build Docker image for demo site
          command: |
            docker build --cache-from=app -t app demo
      - run:
          name: Save Docker layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          paths:
            - /caches/app.tar
          key: v4-dockerlayer-{{ checksum "demo/Dockerfile" }}-{{ checksum "demo/dist/asset-manifest.json" }}

      - run:
          name: Push image to Docker hub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag app "downplay/jarl-demos:$CIRCLE_SHA1"
            docker push "downplay/jarl-demos:$CIRCLE_SHA1"

      # Now deployment
      - run:
          name: Deploy to now staging
          command: |
            echo "FROM downplay/jarl-demos:$CIRCLE_SHA1" >> now/Dockerfile
            yarn global add now
            cd now
            # Deploy and store URL in env
            # sed regexes are fairly arcane but got this working eventually
            NOW_DEPLOY=$(now -t ${NOW_TOKEN} | sed -n "s/.*\(https:\/\/jarl-downplay-co-.*\.sh\).*/\1/p" )
            echo JARL demos staged to ${NOW_DEPLOY}
      - run:
          name: Run E2E against staging
          command: |
            cd ../demo
            export CYPRESS_baseUrl=${NOW_DEPLOY}
            yarn ci-cypress
      - run:
          name: Alias staging to production if tagged
          command: |
            if [ "$JARL_VERSION"] ; then
              echo Deploying ${NOW_DEPLOY} to production environment...
              now -t ${NOW_TOKEN} alias ${NOW_DEPLOY}
            fi

workflows:
  version: 2
  # Build & test anything not on master
  pr_build:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
  # Deploy anything that lands on master
  master_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - publish:
          requires:
            - build
          filters:
            branches:
              only: master
